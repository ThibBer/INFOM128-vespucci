db.rawQuery("SELECT layers.rowid as _id, name FROM layers", null)
db.rawQuery("SELECT layers.rowid as _id, name FROM layers WHERE source=? OR source=?", new String[] { SOURCE_CUSTOM, SOURCE_MANUAL })
db.rawQuery("SELECT layers.rowid as _id, name FROM layers WHERE server_type='" + TileLayerSource.TYPE_WMS_ENDPOINT + "' ORDER BY name", null)
mDatabase.rawQuery(T_FSCACHE_SELECT_OLDEST, null)
mDatabase.rawQuery("SELECT SUM(" + T_FSCACHE_FILESIZE + ") AS " + TMP_COLUMN + " FROM " + T_FSCACHE, null)
db.insert(FILTERENTRIES_TABLE, null, values)
db.execSQL("INSERT INTO filters VALUES ('Default')")
db.insert(OFFSETS_TABLE, null, values)
db.execSQL(INSERT_INTO + SOURCES_TABLE + " VALUES ('" + source + "', 0, " + (tag == null ? "NULL" : "''") + ");")
db.insert(PHOTOS_TABLE, null, values)
db.insert(APIS_TABLE, null, values)
db.insert(PRESETS_TABLE, null, values)
db.insert(GEOCODERS_TABLE, null, values)
db.insert(LAYERS_TABLE, null, values)
db.insert(LAYERS_TABLE, null, values)
db.insert(KEYS_TABLE, null, values)
db.insert(SOURCES_TABLE, null, values)
db.insert(COVERAGES_TABLE, null, values)
db.insert(HEADERS_TABLE, null, values)
db.insert(RULESET_TABLE, null, values)
db.insert(RESURVEY_TABLE, null, values)
db.insert(CHECK_TABLE, null, values)
db.delete(FILTERENTRIES_TABLE, "rowid=" + id, null)
db.delete(OFFSETS_TABLE, IMAGERY_ID_FIELD + "=?", new String[] { id })
db.execSQL("DELETE FROM " + PHOTOS_TABLE)
db.execSQL("DELETE FROM " + PHOTOS_TABLE)
db.delete(PHOTOS_TABLE, SOURCE_COLUMN + "= ?", new String[] { MEDIA_STORE })
db.delete(PHOTOS_TABLE, SOURCE_COLUMN + " = ?", new String[] { MEDIA_STORE })
db.delete(PHOTOS_TABLE, URI_WHERE, new String[] { photo })
db.delete(PHOTOS_TABLE, URI_WHERE, new String[] { indir.getAbsolutePath() })
db.delete(PHOTOS_TABLE, "dir LIKE ?", new String[] { indir.getAbsolutePath() + "/%" })
db.delete(PHOTOS_TABLE, URI_WHERE, new String[] { indir.getAbsolutePath() })
db.delete(PHOTOS_TABLE, URI_WHERE, new String[] { uriString })
db.delete(APIS_TABLE, WHERE_ID, new String[]{id})
db.delete(PRESETS_TABLE, WHERE_ID, new String[]{id})
db.delete(GEOCODERS_TABLE, WHERE_ID, new String[]{id})
db.delete(LAYERS_TABLE, "position = ? AND type = ?", new String[]{Integer.toString(position), type.name()})
db.delete(LAYERS_TABLE, "content_id = ? AND type = ?", new String[]{contentId, type.name()})
db.delete(LAYERS_TABLE, "type = ?", new String[]{type.name()})
db.delete(LAYERS_TABLE, "content_id is NULL AND type = ?", new String[]{type.name()})
db.delete(KEYS_TABLE, NAME_FIELD + NAME_AND + TYPE_FIELD + "=?", new String[] { name, type.toString() })
db.delete(SOURCES_TABLE, NAME_FIELD + "=?", new String[] { source })
db.delete(LAYERS_TABLE, SOURCE_FIELD + "=?", new String[] { source })
db.delete(LAYERS_TABLE, "layers.rowid=?", new String[] { Long.toString(rowId) })
db.delete(LAYERS_TABLE, "layers.id=?", new String[] { id })
db.delete(COVERAGES_TABLE, "id=?", new String[] { id })
db.delete(COVERAGES_TABLE, "id=?", new String[] { id })
mDatabase.delete(T_FSCACHE, T_FSCACHE_WHERE, tileToWhereArgs(t))
mDatabase.execSQL("DELETE FROM " + T_FSCACHE)
mDatabase.delete(T_FSCACHE, T_FSCACHE_WHERE, args)
db.delete(RESURVEY_TABLE, "rowid=?", new String[] { Integer.toString(id) })
db.delete(CHECK_TABLE, "rowid=?", new String[] { Integer.toString(id) })
db.update(FILTERENTRIES_TABLE, values, "rowid=" + id, null)
db.update(SOURCES_TABLE, lastVersion, URI_WHERE, new String[] { source })
db.execSQL("UPDATE apis SET url='" + Urls.DEFAULT_API + "' WHERE id='" + ID_DEFAULT + "'")
db.execSQL("UPDATE presets SET active=1 WHERE id='default'")
db.execSQL("UPDATE apis SET url='" + Urls.DEFAULT_API + "' WHERE id='" + ID_DEFAULT + "'")
db.execSQL("UPDATE geocoders SET url='" + Urls.DEFAULT_PHOTON_SERVER + "' WHERE url='https://photon.komoot.de/'")
db.execSQL("UPDATE apis SET oauth=" + oauth2 + ", accesstokensecret=NULL, accesstoken=NULL WHERE id='" + ID_DEFAULT + "' AND NOT oauth=" + oauth2)
db.execSQL("UPDATE apis SET oauth=" + oauth2 + ", accesstokensecret=NULL, accesstoken=NULL WHERE id='" + ID_SANDBOX + "' AND NOT oauth=" + oauth2)
db.update(APIS_TABLE, values, WHERE_ID, new String[]{id})
db.update(APIS_TABLE, values, WHERE_ID, new String[]{id})
db.update(APIS_TABLE, values, "url= ? AND oauth= ?", new String[]{api.url, Integer.toString(api.auth.ordinal())})
db.update(APIS_TABLE, values, WHERE_ID, new String[]{currentAPI})
db.update(PRESETS_TABLE, values, WHERE_ID, new String[]{id})
db.update(PRESETS_TABLE, values, WHERE_ID, new String[]{id})
db.update(PRESETS_TABLE, values, WHERE_ID, new String[]{id})
db.update(PRESETS_TABLE, values, WHERE_ID, new String[]{id})
db.update(PRESETS_TABLE, values, WHERE_ID, new String[]{dbresult.getString(0)})
db.update(GEOCODERS_TABLE, values, WHERE_ID, new String[]{id})
db.update(GEOCODERS_TABLE, values, WHERE_ID, new String[]{id})
db.update(LAYERS_TABLE, values, WHERE_ROWID, new String[]{dbresult.getString(0)})
db.update(LAYERS_TABLE, values, "position = ?", new String[]{Integer.toString(position)})
db.update(LAYERS_TABLE, values, "position = ?", new String[]{Integer.toString(position)})
db.update(table, values, whereId, new String[]{dbresult.getString(0)})
db.update(KEYS_TABLE, values, NAME_FIELD + NAME_AND + TYPE_FIELD + "=?" + (!overwrite ? AND + CUSTOM_FIELD + "=0" : "")
db.update(SOURCES_TABLE, values, "name='" + source + "'", null)
db.update(LAYERS_TABLE, values, "id=?", new String[] { id })
mDatabase.update(T_FSCACHE, cv, T_FSCACHE_WHERE, tileToWhereArgs(aTile))
db.update(RESURVEY_TABLE, values, "rowid=" + id, null)
db.update(CHECK_TABLE, values, "rowid=" + id, null)
db.execSQL("UPDATE checktags SET key='name|ref' WHERE key='name'")
db.execSQL("CREATE INDEX imagery_idx ON offsets(imagery_id)")
db.execSQL("CREATE INDEX latidx ON " + PHOTOS_TABLE + " (lat)")
db.execSQL("CREATE INDEX lonidx ON " + PHOTOS_TABLE + " (lon)")
db.execSQL("DROP TABLE " + PHOTOS_TABLE)
db.execSQL("DROP TABLE " + SOURCES_TABLE)
db.execSQL("DROP TABLE apis")
db.execSQL("DROP TABLE presets")
db.execSQL("DROP TABLE geocoders")
db.execSQL("DROP TABLE layers")
db.execSQL("CREATE UNIQUE INDEX idx_keys ON keys (name, type)")
db.execSQL("DROP TABLE " + KEYS_TABLE)
db.execSQL("DROP INDEX idx_keys")
db.execSQL("CREATE UNIQUE INDEX idx_keys ON keys (name, type)")
db.execSQL("CREATE INDEX layers_overlay_idx ON layers(overlay)")
db.execSQL("CREATE INDEX layers_source_idx ON layers(source)")
db.execSQL("CREATE INDEX coverages_idx ON coverages(id)")
db.execSQL("CREATE INDEX headers_idx ON headers(id)")
db.execSQL("PRAGMA foreign_keys=ON;")
db.execSQL(T_RENDERER_CREATE_COMMAND)
db.execSQL(T_FSCACHE_CREATE_COMMAND)
db.execSQL("DROP TABLE IF EXISTS " + T_FSCACHE)
db.rawQuery(QUERY + filter + "'", null)
db.rawQuery(QUERY + filter + "'", null)
db.rawQuery(QUERY + filter + "'", null)
db.rawQuery(QUERY + filter + "'", null)
db.rawQuery(QUERY + filter + "'", null)
db.rawQuery(QUERY_LAYER_BY_ROWID, new String[] { Long.toString(rowId) }))
mDatabase.rawQuery(T_MBTILES_GET_ZOOMS, null))
database.rawQuery(ValidatorRulesDatabase.QUERY_RESURVEY_DEFAULT, null)
database.rawQuery(ValidatorRulesDatabase.QUERY_RESURVEY_BY_NAME, new String[] { name })
database.rawQuery(ValidatorRulesDatabase.QUERY_CHECK_DEFAULT, null)
database.rawQuery(ValidatorRulesDatabase.QUERY_CHECK_BY_NAME, new String[] { name })
db.rawQuery(ValidatorRulesDatabase.QUERY_RESURVEY_BY_ROWID, new String[] { Integer.toString(id) })
db.rawQuery(ValidatorRulesDatabase.QUERY_CHECK_BY_ROWID, new String[] { Integer.toString(id) })
db.execSQL("CREATE TABLE filters (name TEXT)")
db.execSQL("CREATE TABLE IF NOT EXISTS " + SOURCES_TABLE + " (dir VARCHAR, last_scan int8, tag VARCHAR DEFAULT NULL);")
db.execSQL("CREATE TABLE apis (id TEXT, name TEXT, url TEXT, readonlyurl TEXT, notesurl TEXT, user TEXT, pass TEXT, preset TEXT, showicon INTEGER DEFAULT 1, oauth INTEGER DEFAULT 0, accesstoken TEXT, accesstokensecret TEXT)")
db.execSQL("CREATE TABLE presets (id TEXT, name TEXT, url TEXT, version TEXT DEFAULT NULL, shortdescription TEXT DEFAULT NULL, description TEXT DEFAULT NULL, lastupdate TEXT, data TEXT, position INTEGER DEFAULT 0, active INTEGER DEFAULT 0, usetranslations INTEGER DEFAULT 1)")
db.execSQL("CREATE TABLE geocoders (id TEXT, type TEXT, version INTEGER DEFAULT 0, name TEXT, url TEXT, active INTEGER DEFAULT 0)")
db.execSQL("CREATE TABLE layers (type TEXT, position INTEGER DEFAULT -1, visible INTEGER DEFAULT 1, content_id TEXT)")
db.execSQL("CREATE TABLE geocoders (id TEXT, type TEXT, version INTEGER DEFAULT 0, name TEXT, url TEXT, active INTEGER DEFAULT 0)")
db.execSQL("CREATE TABLE layers (type TEXT, position INTEGER DEFAULT -1, visible INTEGER DEFAULT 1, content_id TEXT)")
db.execSQL("CREATE TABLE sources (name TEXT NOT NULL PRIMARY KEY, updated INTEGER)")
db.execSQL("CREATE TABLE rulesets (id INTEGER, name TEXT)")
db.execSQL("CREATE TABLE checktags (ruleset INTEGER, key TEXT, optional INTEGER DEFAULT 0, FOREIGN KEY(ruleset) REFERENCES rulesets(id))")
db.execSQL(ALTER_TABLE + PHOTOS_TABLE + " ADD direction int DEFAULT NULL")
db.execSQL(ALTER_TABLE + PHOTOS_TABLE + " ADD source VARCHAR DEFAULT NULL")
db.execSQL(ALTER_TABLE + SOURCES_TABLE + " ADD tag VARCHAR DEFAULT NULL")
db.execSQL("ALTER TABLE apis ADD COLUMN showicon INTEGER DEFAULT 0")
db.execSQL("ALTER TABLE apis ADD COLUMN oauth INTEGER DEFAULT 0")
db.execSQL("ALTER TABLE apis ADD COLUMN accesstoken TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE apis ADD COLUMN accesstokensecret TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE presets ADD COLUMN active INTEGER DEFAULT 0")
db.execSQL("ALTER TABLE apis ADD COLUMN readonlyurl TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE apis ADD COLUMN notesurl TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE presets ADD COLUMN position INTEGER DEFAULT 0")
db.execSQL("ALTER TABLE presets ADD COLUMN usetranslations INTEGER DEFAULT 1")
db.execSQL("ALTER TABLE presets ADD COLUMN version TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE presets ADD COLUMN shortdescription TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE presets ADD COLUMN description TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN no_tile_header TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN no_tile_value TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN description TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN privacy_policy_url TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN category TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN attribution_url TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN no_tile_tile BLOB DEFAULT NULL")
db.execSQL("ALTER TABLE layers ADD COLUMN tile_type TEXT DEFAULT NULL")
db.execSQL("ALTER TABLE resurveytags ADD COLUMN is_regexp INTEGER DEFAULT 0")
